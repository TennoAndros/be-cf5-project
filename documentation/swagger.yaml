tags:
  - name: Login
    description: Operations related to user authentication
  - name: Genres
    description: Operations related to genres
  - name: Books
    description: Operations related to books
  - name: Reviews
    description: Operations related to reviews
  - name: Users
    description: Operations related to users
  - name: Logout
    description: Operation to log out a user

paths:
  /api/genres:
    get:
      summary: Get a list of genres
      description: Retrieve a list of all book genres.
      tags:
        - Genres
      responses:
        "200":
          description: Successfully retrieved list of genres
          content:
            application/json:
              schema:
                type: object
                properties:
                  genres:
                    type: array
                    items:
                      type: object
                      properties:
                        genre:
                          type: string
                          example: "Mystery"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Please enter a valid link. Go back and try again."
    post:
      summary: Create a new genre
      description: Create a new genre entry.
      tags:
        - Genres
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: string
                  example: "Satire"
      responses:
        "201":
          description: Genre created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  newGenre:
                    type: object
                    properties:
                      genre:
                        type: string
                        example: "Satire"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    examples:
                      missing_fields:
                        value: "Missing Required Fields!"
                      genre_exists:
                        value: "Genre Already Exists!"
                      invalid_genre:
                        value: "Genre must not contain numbers!"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "No Authentication Token provided!"
/api/books:
  get:
    summary: Get a list of books
    description: Retrieve a list of books with optional filtering and sorting.
    tags:
      - Books
    parameters:
      - in: query
        name: genre
        schema:
          type: string
        description: Filter books by genre
      - in: query
        name: sort_by
        schema:
          type: string
        enum: [avg_rating, review_count]
        description: Sort books by average rating or review count
      - in: query
        name: order
        schema:
          type: string
        enum: [asc, desc]
        description: Sorting order (ascending or descending)
      - in: query
        name: limit
        schema:
          type: integer
          minimum: 0
          example: 10
        description: Maximum number of books to return (default 10, 0 for all)
      - in: query
        name: p
        schema:
          type: integer
          minimum: 1
          example: 1
        description: Page number for pagination (default 1)
    responses:
      "200":
        description: Successfully retrieved list of books
        content:
          application/json:
            schema:
              type: object
              properties:
                books:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "CAMINO GHOSTS"
                      image_url:
                        type: string
                        example: "https://storage.googleapis.com/du-prd/books/images/9780385545990.jpg"
                      description:
                        type: string
                        example: "The third book in the Camino series. The last living inhabitant of a deserted island gets in the way of a resort developer."
                      author:
                        type: string
                        example: "John Grisham"
                      book_id:
                        type: number
                        example: 1
                      publisher:
                        type: string
                        example: "Doubleday"
                      amazon_book_url:
                        type: string
                        example: "https://www.amazon.com/dp/0385545991?tag=thenewyorktim-20"
                      isbn:
                        type: string
                        example: "0385545991"
                      genre:
                        type: string
                        example: "Mystery"
                      review_count:
                        type: integer
                        example: 2
                      avg_rating:
                        type: number
                        example: 4.5
                total_count:
                  type: integer
                  example: 12
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Please enter a valid order. Order should be ASC(ascending) or DESC(descending)"
      "404":
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Genre Not Found!"
  post:
    summary: Create a new book
    description: Create a new book entry.
    tags:
      - Books
    security:
      - cookieAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: "CAMINO GHOSTS 2"
              image_url:
                type: string
                example: "https://storage.googleapis.com/du-prd/books/images/9780385545990.jpg"
              description:
                type: string
                example: "The fourth book in the Camino series. The last living inhabitant of a deserted island gets in the way of a resort developer."
              author:
                type: string
                example: "John Grisham"
              publisher:
                type: string
                example: "Doubleday"
              amazon_book_url:
                type: string
                example: "https://www.amazon.com/dp/0365545991?tag=thenewyorktim-20"
              isbn:
                type: string
                example: "0365545991"
              genre:
                type: string
                example: "Romance"
    responses:
      "201":
        description: Book created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                newBook:
                  type: object
                  properties:
                    title:
                      type: string
                      example: "CAMINO GHOSTS 2"
                    image_url:
                      type: string
                      example: "https://storage.googleapis.com/du-prd/books/images/9780385545990.jpg"
                    description:
                      type: string
                      example: "The fourth book in the Camino series. The last living inhabitant of a deserted island gets in the way of a resort developer."
                    author:
                      type: string
                      example: "John Grisham"
                    publisher:
                      type: string
                      example: "Doubleday"
                    amazon_book_url:
                      type: string
                      example: "https://www.amazon.com/dp/0365545991?tag=thenewyorktim-20"
                    isbn:
                      type: string
                      example: "0365545991"
                    genre:
                      type: string
                      example: "Romance"
                    book_id:
                      type: number
                      example: 13
                    review_count:
                      type: integer
                      example: 0
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "No Book Submitted!"
                msg2:
                  type: string
                  example: "Bad Request!"
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "No Authentication Token provided!"
/api/books/{book_id}:
  get:
    summary: Get a book by ID
    description: Retrieve a book based on its ID.
    tags:
      - Books
    parameters:
      - in: path
        name: book_id
        required: true
        schema:
          type: integer
          example: 1
        description: ID of the book to retrieve
    responses:
      "200":
        description: Successfully retrieved book
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  type: object
                  properties:
                    title:
                      type: string
                      example: "CAMINO GHOSTS"
                    image_url:
                      type: string
                      example: "https://storage.googleapis.com/du-prd/books/images/9780385545990.jpg"
                    description:
                      type: string
                      example: "The third book in the Camino series. The last living inhabitant of a deserted island gets in the way of a resort developer."
                    author:
                      type: string
                      example: "John Grisham"
                    book_id:
                      type: number
                      example: 1
                    publisher:
                      type: string
                      example: "Doubleday"
                    amazon_book_url:
                      type: string
                      example: "https://www.amazon.com/dp/0385545991?tag=thenewyorktim-20"
                    isbn:
                      type: string
                      example: "0385545991"
                    genre:
                      type: string
                      example: "Mystery"
                    review_count:
                      type: integer
                      example: 2
                    avg_rating:
                      type: number
                      example: 4.5
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Bad Request!"
      "404":
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Book Not Found!"
  delete:
    summary: Delete a book by ID
    description: Delete a book specified by its ID. Requires admin privileges.
    tags:
      - Books
    parameters:
      - in: path
        name: book_id
        required: true
        schema:
          type: integer
          example: 1
        description: ID of the book to delete
    security:
      - cookieAuth: []
    responses:
      "204":
        description: Book deleted successfully
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Invalid book id. Must be a number!"
      "403":
        description: Forbidden
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Unauthorized - Only admin can delete books!"
      "404":
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Book doesn't exist!"
/api/books/{book_id}/reviews:
  get:
    summary: Get reviews for a specific book
    description: Retrieve reviews associated with a specific book based on book_id.
    tags:
      - Reviews
    parameters:
      - in: path
        name: book_id
        required: true
        schema:
          type: integer
          example: 3
        description: ID of the book to retrieve reviews for
      - in: query
        name: limit
        schema:
          type: integer
          example: 10
        description: Maximum number of reviews to retrieve (default is 10)
      - in: query
        name: p
        schema:
          type: integer
          example: 1
        description: Page number for pagination
    responses:
      "200":
        description: Successfully retrieved reviews
        content:
          application/json:
            schema:
              type: object
              properties:
                reviews:
                  type: array
                  items:
                    type: object
                    properties:
                      review_id:
                        type: number
                        example: 1
                      username:
                        type: string
                        example: smithrose
                      created_at:
                        type: string
                        example: "2024-06-26T12:00:00Z"
                      rating:
                        type: number
                        example: 5
                      body:
                        type: string
                        example: "Great book!"
                      book_id:
                        type: number
                        example: 3
                total_count:
                  type: number
                  example: 10
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Bad Request!"
      "404":
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Book Not Found!"
  post:
    summary: Add a new review to a book
    description: Add a review to a book specified by book_id.
    tags:
      - Reviews
    parameters:
      - in: path
        name: book_id
        required: true
        schema:
          type: integer
          example: 1
        description: ID of the book to add a review to
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              body:
                type: string
                example: "Great book!"
              rating:
                type: integer
                example: 5
            required:
              - body
              - rating
        security:
          - cookieAuth: []
    responses:
      "201":
        description: Review added successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                newReview:
                  type: object
                  properties:
                    review_id:
                      type: number
                      example: 1
                    username:
                      type: string
                      example: smithrose
                    created_at:
                      type: string
                      example: "2024-06-26T12:00:00Z"
                    rating:
                      type: number
                      example: 5
                    body:
                      type: string
                      example: "Great book!"
                    book_id:
                      type: number
                      example: 1
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Bad Request!"
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "No Authentication Token provided!"
      "404":
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Book Not Found!"
/api/reviews/{review_id}:
  patch:
    summary: Update a review
    description: Update the rating and body of a review if you are the owner.
    tags:
      - Reviews
    parameters:
      - in: path
        name: review_id
        required: true
        schema:
          type: integer
          example: 2
        description: ID of the review to update
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              body:
                type: string
                example: Test
              rating:
                type: integer
                example: 3
            required:
              - body
              - rating
        security:
          - cookieAuth: []
    responses:
      "200":
        description: Successfully updated review
        content:
          application/json:
            schema:
              type: object
              properties:
                updatedReview:
                  type: object
                  properties:
                    review_id:
                      type: number
                      example: 2
                    username:
                      type: string
                      example: smithrose
                    created_at:
                      type: string
                      example: "2024-06-26T12:00:00Z"
                    book_id:
                      type: number
                      example: 1
                    body:
                      type: string
                      example: Test
                    rating:
                      type: integer
                      example: 3
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Missing required fields!"
      "403":
        description: Forbidden
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Forbidden - You can only edit your own reviews"
  delete:
    summary: Delete a review
    description: Delete a review if you are the owner.
    tags:
      - Reviews
    parameters:
      - in: path
        name: review_id
        required: true
        schema:
          type: integer
          example: 2
        description: ID of the review to delete
        security:
          - cookieAuth: []
    responses:
      "204":
        description: Review deleted successfully
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Forbidden - You can only delete your own reviews"
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "No Authentication Token provided!"
      "404":
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: "Review Not Found!"
/api/users:
  post:
    summary: Create a new user
    description: Endpoint to register a new user.
    tags:
      - Users
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: somethinggg1@outlook.com
              username:
                type: string
                example: mariakalas
              password:
                type: string
                example: your_password_here123
              first_name:
                type: string
                example: Maria
              last_name:
                type: string
                example: Kalas
              avatar_url:
                type: string
                example: https://randomuser.me/api/portraits/women/14.jpg
            required:
              - email
              - username
              - password
    responses:
      "201":
        description: User successfully created
        content:
          application/json:
            schema:
              type: object
              properties:
                newUser:
                  type: object
                  properties:
                    user_id:
                      type: number
                      example: 1
                    email:
                      type: string
                      example: somethinggg1@outlook.com
                    username:
                      type: string
                      example: mariakalas
                    password:
                      type: string
                      example: "$2b$10$CywE6p7gYq2H67ZdQ9K/KOs..5ZzJyQSEiG5Ls3h2ZL9W18mUwv9m"
                    first_name:
                      type: string
                      example: Maria
                    last_name:
                      type: string
                      example: Kalas
                    avatar_url:
                      type: string
                      example: https://randomuser.me/api/portraits/women/14.jpg
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Missing Required Fields!
      "409":
        description: Conflict
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: User Already Exists!
/api/users/{username}:
  get:
    summary: Get user by username
    description: Retrieve user information based on username.
    tags:
      - Users
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: Username of the user to retrieve.
    responses:
      "200":
        description: Successfully retrieved user
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    user_id:
                      type: number
                      example: 1
                    email:
                      type: string
                      example: something1@outlook.com
                    username:
                      type: string
                      example: smithrose
                    password:
                      type: string
                      example: "$2b$10$CywE6p7gYq2H67ZdQ9K/KOs..5ZzJyQSEiG5Ls3h2ZL9W18mUwv9m"
                    first_name:
                      type: string
                      example: Rose
                    last_name:
                      type: string
                      example: Smith
                    avatar_url:
                      type: string
                      example: "https://randomuser.me/api/portraits/women/1.jpg"
      "404":
        description: User Not Found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: User Not Found!
  patch:
    summary: Update user by username
    description: Update user information based on username.
    tags:
      - Users
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: Username of the user to update.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: newemail@domain.com
              first_name:
                type: string
                example: Updated
              last_name:
                type: string
                example: User
            minProperties: 1
        security:
          - cookieAuth: []
    responses:
      "200":
        description: Successfully updated user
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    user_id:
                      type: number
                      example: 1
                    email:
                      type: string
                      example: newemail@domain.com
                    username:
                      type: string
                      example: scotts
                    password:
                      type: string
                      example: "$2b$10$CywE6p7gYq2H67ZdQ9K/KOs..5ZzJyQSEiG5Ls3h2ZL9W18mUwv9m"
                    first_name:
                      type: string
                      example: Updated
                    last_name:
                      type: string
                      example: User
                    avatar_url:
                      type: string
                      example: "https://randomuser.me/api/portraits/women/5.jpg"
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: No valid fields to update!
      "404":
        description: User Not Found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: User Not Found!
      "403":
        description: Forbidden
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Forbidden - You can only edit your own account

  delete:
    summary: Delete user by username
    description: Delete user account based on username.
    tags:
      - Users
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: Username of the user to delete.
        security:
          - cookieAuth: []
    responses:
      "204":
        description: User successfully deleted
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: No Authentication Token provided!
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: No Authentication Token provided!
      "403":
        description: Forbidden
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: You can only delete your own account!
/api/users/login:
  post:
    summary: Login user
    tags:
      - Login
    description: Endpoint to authenticate a user.
      Upon successful login, a 'Set-Cookie' header will be returned
      containing the 'access_token' JWT cookie. This cookie is marked
      as 'HttpOnly' and 'Secure', meaning it is not accessible via
      JavaScript (including local storage) for security reasons.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: scotts
              password:
                type: string
                example: your_password_here102
            required:
              - username
              - password
    responses:
      "200":
        description: Successfully logged in
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: number
                      example: 1
                    email:
                      type: string
                      example: something5@outlook.com
                    username:
                      type: string
                      example: scotts
                    first_name:
                      type: string
                      example: Sophia
                    last_name:
                      type: string
                      example: Scott
                    avatar_url:
                      type: string
                      example: https://randomuser.me/api/portraits/women/5.jpg
            headers:
              Set-Cookie:
                schema:
                  type: string
                  example: access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure
      "400":
        description: Bad request
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Username required!
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Invalid credentials!
      "404":
        description: Not Found
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: User Not Found!
/api/users/logout:
  post:
    summary: Logout user
    description: Endpoint to log out a user, invalidating the authentication token.
    tags:
      - Logout
    requestBody:
      required: false
      security:
        - cookieAuth: []
    responses:
      "200":
        description: Successfully logged out
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Logged out successfully
      "401":
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: No Authentication Token provided!
      "403":
        description: Forbidden
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                  example: Invalid token! Authentication Failed
